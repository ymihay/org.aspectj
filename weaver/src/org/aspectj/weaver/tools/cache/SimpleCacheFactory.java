/*******************************************************************************
 * Copyright (c) 2012 Contributors.
 * All rights reserved.
 * This program and the accompanying materials are made available
 * under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution and is available at
 * http://eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Juan Mahillo, 
 *  Javier Pereira, 
 *  Abraham Nevada (lucierna)	 initial implementation
 *******************************************************************************/

package org.aspectj.weaver.tools.cache;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;

import org.aspectj.weaver.Dump;

public class SimpleCacheFactory {
	
	public static final String CACHE_ENABLED_PROPERTY = "aj.weaving.cache.enabled";
	public static final String CACHE_DIR = "aj.weaving.cache.dir";
	public static final String CACHE_IMPL = "aj.weaving.cache.impl";
	public static final String CACHE_VERBOSE = "aj.weaving.cache.verbose";
	public static final String GENERATED_CACHE_VERBOSE = "aj.weaving.generatedcache.verbose";
	
	private static final String LUCIERNA_BASEDIR_PROPERTY = "antorcha.install.dir";
	private static final String LUCIERNA_AGENT_VERSION_FILE = "LuciernaAgentVersion";//stores the agent version that generated the current cache
	
	public static final String PATH_DEFAULT = System.getProperty("java.io.tmpdir");
	public static final boolean BYDEFAULT= false;	
		
		
	public static String path = PATH_DEFAULT;
	public static Boolean enabled = false;
	private static boolean determinedIfEnabled = false;
	private static SimpleCache lacache=null;
	
	private static Boolean luciernaRunning = null;
	
	private static boolean verbose = false;
	private static boolean verboseGenerated = false;
	
	private static boolean emptyCache = false; //true when the cache is new or is empty
	
	public static synchronized SimpleCache createSimpleCache(){
		if (lacache==null){
		 	
			try {
				String property = System.getProperty(CACHE_ENABLED_PROPERTY);
				if (property == null ){
					enabled = BYDEFAULT;
				}
				else if (property.equalsIgnoreCase("true")){
					
						String impl = System.getProperty(CACHE_IMPL);
						if (SimpleCache.IMPL_NAME.equals(impl)){
							enabled = true;
						}
						else{
							enabled = BYDEFAULT;
						}
				}
				else{
					enabled = BYDEFAULT;
				}
				
			} catch (Throwable t) {
				enabled=BYDEFAULT;
				System.err.println("Error creating cache");
				t.printStackTrace();
				Dump.dumpWithException(t);
			}

			try {
				path = System.getProperty(CACHE_DIR);
				if (path == null){
					path = PATH_DEFAULT;
				}
				
			} catch (Throwable t) {
				path=PATH_DEFAULT;
				t.printStackTrace();
				Dump.dumpWithException(t);
			}
			File f = new File(path);
			if (!f.exists()){
				f.mkdirs();
			}
			
			if  (enabled){
				String ver = System.getProperty(CACHE_VERBOSE);
				if (ver != null){
					verbose = ("true".equalsIgnoreCase(ver)) ;
				}
				String genVer = System.getProperty(GENERATED_CACHE_VERBOSE);
				if (ver != null){
					verboseGenerated = ("true".equalsIgnoreCase(genVer));
				}
			}
			
			lacache= new SimpleCache(path, enabled, verbose, verboseGenerated);
			if (enabled){
				emptyCache = lacache.getSize() == 0;
			}
		}
		
		return lacache;
		
	}

	private static void determineIfEnabled() {
		try {
			String property = System.getProperty(CACHE_ENABLED_PROPERTY);
			if (property == null ){
				enabled = BYDEFAULT;
			}
			else if (property.equalsIgnoreCase("true")){
				
					String impl = System.getProperty(CACHE_IMPL);
					if (SimpleCache.IMPL_NAME.equals(impl)){
						enabled = true;
					}
					else{
						enabled = BYDEFAULT;
					}
			}
			else{
				enabled = BYDEFAULT;
			}
			
		} catch (Throwable t) {
			enabled=BYDEFAULT;
			System.err.println("Error creating cache");
			t.printStackTrace();
			Dump.dumpWithException(t);
		}
		determinedIfEnabled = true;
	}
	
	// Should behave ok with two threads going through here, well whoever gets there first will set determinedIfEnabled but only after
	// it has set 'enabled' to the right value.
	public static boolean isEnabled() {
		if (!determinedIfEnabled) {
			determineIfEnabled();
		}
		return enabled;
	}

	public static boolean isLuciernaRunning() {
		if (luciernaRunning == null){
			checkIfIsLuciernaRunning();
		}
		return luciernaRunning;
	}

	private static void checkIfIsLuciernaRunning() {
		String property = System.getProperty(LUCIERNA_BASEDIR_PROPERTY);
		luciernaRunning = (property != null);		
	}

	/**
	 * check if the aspectj cache is still valid. This is, is the cache was generated by an old Lucierna agent is invalid.
	 * If the cache is invalid, the method resetCacheFolder must be called in order to clean the cache
	 * @param luciernaAgentVersion
	 * @return true if the cache is still valid, false if not
	 */
	public static boolean checkLuciernaAgentVersion(String luciernaAgentVersion) {
		if (emptyCache){
			saveAgentVersion(luciernaAgentVersion);
			return true;
		}
		BufferedReader reader = null;
		boolean valid = false;
		try{
			File file = new File(path, LUCIERNA_AGENT_VERSION_FILE);
			if (file.exists()){
				reader = new BufferedReader(new FileReader(file));
				String line = reader.readLine(); //only contains one line
				valid = (line != null && line.equals(luciernaAgentVersion));
			}
			
		}catch(Throwable t){
			t.printStackTrace();
			Dump.dumpWithException(t);
		}finally{
			if (reader != null){
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return valid;
	}

	/**
	 * Reset the cache
	 * @param luciernaAgentVersion
	 * @return cache object
	 */
	public static SimpleCache resetCacheFolder(String luciernaAgentVersion) {
		System.out.println("Reseting cache!:"+path);
		deleteDirectory(new File(path));
		lacache = new SimpleCache(path, enabled, verbose, verboseGenerated);
		saveAgentVersion(luciernaAgentVersion);
		return lacache;
	}
	
	/**
	 * Deleted a directory and all children Returns true if the directory has been properly deleted, false if not 
	 * @param dir
	 * @return
	 */
	private static boolean deleteDirectory(File directory){
		if (directory == null || !directory.exists() ){
			System.err.println("Cannot clean cache. Path "+directory.getAbsolutePath()+" does not exist.");
			return false;
		}
		boolean success = true;
		File[] listFiles = directory.listFiles();
		for (File f : listFiles){
			if (f.isDirectory()){
				success &= deleteDirectory(f);
			}else{
				success &= f.delete();
			}
		}
		return success;
	}
	
	
	private static void saveAgentVersion(String luciernaAgentVersion) {
		File file = new File(path, LUCIERNA_AGENT_VERSION_FILE);
		BufferedWriter writer = null; 
		try {
			writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)));
			writer.write(luciernaAgentVersion);
			writer.flush();
			
		} catch (Throwable t) {
			t.printStackTrace();
		}finally{
			if (writer != null){
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	
	
}
